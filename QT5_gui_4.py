#!/usr/bin/env python3
#sudo setcap cap_net_raw,cap_net_admin+eip $(which pmacctd) Important command before using this py.
import sys, os, subprocess, datetime, tempfile
import netifaces
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QPushButton,
    QLabel, QComboBox, QLineEdit, QFileDialog, QMessageBox
)
from PyQt5.QtCore import QProcess

class PmacctGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("pmacct Controller")
        self.resize(450,250)
        layout = QVBoxLayout(self)

        # --- Flow‐field input ---
        layout.addWidget(QLabel("Aggregation primitives (comma‐separated):"))
        self.fields_input = QLineEdit("src_host,dst_host,src_port,dst_port,proto")
        layout.addWidget(self.fields_input)

        # --- Interface selector ---
        layout.addWidget(QLabel("Select network interface:"))
        self.iface_combo = QComboBox()
        layout.addWidget(self.iface_combo)
        btn_refresh = QPushButton("Refresh Interfaces")
        btn_refresh.clicked.connect(self.load_interfaces)
        layout.addWidget(btn_refresh)

        # --- Output folder picker ---
        btn_folder = QPushButton("Select Output Folder")
        btn_folder.clicked.connect(self.choose_folder)
        layout.addWidget(btn_folder)
        self.output_folder = os.getcwd()

        # --- Start/Stop ---
        self.btn_start = QPushButton("Start Collection")
        self.btn_start.clicked.connect(self.start_collection)
        layout.addWidget(self.btn_start)
        self.btn_stop = QPushButton("Stop Collection")
        self.btn_stop.clicked.connect(self.stop_collection)
        layout.addWidget(self.btn_stop)

        self.process = QProcess(self)
        self.load_interfaces()
        # inside __init__, after self.process = QProcess(self):
        self.process.readyReadStandardError.connect(self._on_error)
        self.process.readyReadStandardOutput.connect(self._on_output)

        # add these methods to the class:
    def _on_error(self):
        err = bytes(self.process.readAllStandardError()).decode()
        QMessageBox.critical(self, "pmacctd stderr", err)

    def _on_output(self):
        out = bytes(self.process.readAllStandardOutput()).decode()
        QMessageBox.information(self, "pmacctd stdout", out)
        #Debuggin ends here
    def load_interfaces(self):
        self.iface_combo.clear()
        for iface in netifaces.interfaces():
            self.iface_combo.addItem(iface)

    def choose_folder(self):
        d = QFileDialog.getExistingDirectory(self, "Output Folder", self.output_folder)
        if d:
            self.output_folder = d

    def make_output_name(self):
        ts = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return os.path.join(self.output_folder,
                            f"flows_{self.iface_combo.currentText()}_{ts}.csv")

    def write_temp_config(self, iface, out_csv, primitives):
        cfg = f"""
# pmacct configuration generated by GUI
0daemonize: false
pcap_interface: {iface}
aggregate[csv]: {primitives}
plugins: print[csv]
print_output[csv]: csv
print_output_file[csv]: {out_csv}
"""
        fd, path = tempfile.mkstemp(prefix="pmacct_", suffix=".conf", dir=self.output_folder)
        with os.fdopen(fd, "w") as f:
            f.write(cfg.strip())
        return path

      ####
    def start_collection(self):
        iface = self.iface_combo.currentText()
        primitives = self.fields_input.text().strip()
        out = self.make_output_name()

        # 1) Verify that the directory exists and is writable
        parent = os.path.dirname(out)
        if not os.path.isdir(parent) or not os.access(parent, os.W_OK):
          QMessageBox.critical(
              self,
              "Directory Error",
              f"Cannot write to output folder:\n{parent}"
          )
          return

         # 2) Write the temp config and launch
        conf = self.write_temp_config(iface, out, primitives)
        print("DEBUG: running conf →", conf)
        self.process.start("pmacctd", ["-f", conf])
        QMessageBox.information(self, "Started",
        f"Collecting on {iface}\nOutput → {out}")



####
    def stop_collection(self):
        # Graceful stop: send SIGTERM to pmacctd
        #subprocess.call("sudo pkill -TERM pmacctd", shell=True)
        self.process.terminate()
        QMessageBox.information(self, "Stopped", "pmacctd has been stopped.")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = PmacctGUI()
    win.show()
    sys.exit(app.exec_())
